"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _clsx = _interopRequireDefault(require("clsx"));

var _react2 = require("@mdx-js/react");

var _Head = _interopRequireDefault(require("@docusaurus/Head"));

var _Link = _interopRequireDefault(require("@docusaurus/Link"));

var _MDXComponents = _interopRequireDefault(require("@theme/MDXComponents"));

var _useBaseUrl = _interopRequireDefault(require("@docusaurus/useBaseUrl"));

var _stylesModule = _interopRequireDefault(require("./styles.module.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
const MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

function BlogPostItem(props) {
  const {
    children,
    frontMatter,
    metadata,
    truncated,
    isBlogPostPage = false
  } = props;
  const {
    date,
    permalink,
    tags,
    readingTime
  } = metadata;
  const {
    author,
    title,
    image,
    keywords
  } = frontMatter;
  const authorURL = frontMatter.author_url || frontMatter.authorURL;
  const authorTitle = frontMatter.author_title || frontMatter.authorTitle;
  const authorImageURL = frontMatter.author_image_url || frontMatter.authorImageURL;
  const imageUrl = (0, _useBaseUrl.default)(image, {
    absolute: true
  });

  const renderPostHeader = () => {
    const TitleHeading = isBlogPostPage ? 'h1' : 'h2';
    const match = date.substring(0, 10).split('-');
    const year = match[0];
    const month = MONTHS[parseInt(match[1], 10) - 1];
    const day = parseInt(match[2], 10);
    return <header>
        <TitleHeading className={(0, _clsx.default)('margin-bottom--sm', _stylesModule.default.blogPostTitle)}>
          {isBlogPostPage ? title : <_Link.default to={permalink}>{title}</_Link.default>}
        </TitleHeading>
        <div className="margin-vert--md">
          <time dateTime={date} className={_stylesModule.default.blogPostDate}>
            {month} {day}, {year}{' '}
            {readingTime && <> Â· {Math.ceil(readingTime)} min read</>}
          </time>
        </div>
        <div className="avatar margin-vert--md">
          {authorImageURL && <a className="avatar__photo-link avatar__photo" href={authorURL} target="_blank" rel="noreferrer noopener">
              <img src={authorImageURL} alt={author} />
            </a>}
          <div className="avatar__intro">
            {author && <>
                <h4 className="avatar__name">
                  <a href={authorURL} target="_blank" rel="noreferrer noopener">
                    {author}
                  </a>
                </h4>
                <small className="avatar__subtitle">{authorTitle}</small>
              </>}
          </div>
        </div>
      </header>;
  };

  return <>
      <_Head.default>
        {keywords && keywords.length && <meta name="keywords" content={keywords.join(',')} />}
        {image && <meta property="og:image" content={imageUrl} />}
        {image && <meta name="twitter:image" content={imageUrl} />}
        {image && <meta name="twitter:image:alt" content={`Image for ${title}`} />}
      </_Head.default>

      <article className={!isBlogPostPage ? 'margin-bottom--xl' : undefined}>
        {renderPostHeader()}
        <section className="markdown">
          <_react2.MDXProvider components={_MDXComponents.default}>{children}</_react2.MDXProvider>
        </section>
        {(tags.length > 0 || truncated) && <footer className="row margin-vert--lg">
            {tags.length > 0 && <div className="col">
                <strong>Tags:</strong>
                {tags.map(({
            label,
            permalink: tagPermalink
          }) => <_Link.default key={tagPermalink} className="margin-horiz--sm" to={tagPermalink}>
                    {label}
                  </_Link.default>)}
              </div>}
            {truncated && <div className="col text--right">
                <_Link.default to={metadata.permalink} aria-label={`Read more about ${title}`}>
                  <strong>Read More</strong>
                </_Link.default>
              </div>}
          </footer>}
      </article>
    </>;
}

var _default = BlogPostItem;
exports.default = _default;