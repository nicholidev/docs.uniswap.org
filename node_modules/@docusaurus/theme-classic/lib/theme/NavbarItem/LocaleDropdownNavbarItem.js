"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = LocaleDropdownNavbarItem;

var _react = _interopRequireDefault(require("react"));

var _DefaultNavbarItem = _interopRequireDefault(require("./DefaultNavbarItem"));

var _useDocusaurusContext = _interopRequireDefault(require("@docusaurus/useDocusaurusContext"));

var _router = require("@docusaurus/router");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
function LocaleDropdownNavbarItem({
  mobile,
  ...props
}) {
  const {
    siteConfig: {
      baseUrl
    },
    i18n: {
      defaultLocale,
      currentLocale,
      locales,
      localeConfigs
    }
  } = (0, _useDocusaurusContext.default)();
  const {
    pathname
  } = (0, _router.useLocation)();

  function getLocaleLabel(locale) {
    return localeConfigs[locale].label;
  } //  TODO Docusaurus expose this unlocalized baseUrl more reliably


  const baseUrlUnlocalized = currentLocale === defaultLocale ? baseUrl : baseUrl.replace(`/${currentLocale}/`, '/');
  const pathnameSuffix = pathname.replace(baseUrl, '');

  function getLocalizedBaseUrl(locale) {
    return locale === defaultLocale ? `${baseUrlUnlocalized}` : `${baseUrlUnlocalized}${locale}/`;
  }

  const items = locales.map(locale => {
    const to = `${getLocalizedBaseUrl(locale)}${pathnameSuffix}`;
    return {
      isNavLink: true,
      label: getLocaleLabel(locale),
      to: `pathname://${to}`,
      target: '_self',
      autoAddBaseUrl: false,
      className: locale === currentLocale ? 'dropdown__link--active' : ''
    };
  }); // Mobile is handled a bit differently

  const dropdownLabel = mobile ? 'Languages' : getLocaleLabel(currentLocale);
  return <_DefaultNavbarItem.default {...props} mobile={mobile} label={dropdownLabel} items={items} />;
}