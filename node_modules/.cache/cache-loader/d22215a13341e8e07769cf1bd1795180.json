{"remainingRequest":"/Users/Connor/Uniswap/uniswap-docs/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/Connor/Uniswap/uniswap-docs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/Connor/Uniswap/uniswap-docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/Connor/Uniswap/uniswap-docs/docs/guides/smart-contract-integration/03-providing-liquidity.md","dependencies":[{"path":"/Users/Connor/Uniswap/uniswap-docs/docs/guides/smart-contract-integration/03-providing-liquidity.md","mtime":1613673308232},{"path":"/Users/Connor/Uniswap/uniswap-docs/.docusaurus/docusaurus-plugin-content-docs/docs/site-docs-guides-smart-contract-integration-03-providing-liquidity-md-e2c.json","mtime":1613746365118},{"path":"/Users/Connor/Uniswap/uniswap-docs/node_modules/cache-loader/dist/cjs.js","mtime":1613486809327},{"path":"/Users/Connor/Uniswap/uniswap-docs/node_modules/babel-loader/lib/index.js","mtime":1613486809014},{"path":"/Users/Connor/Uniswap/uniswap-docs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1613486826947},{"path":"/Users/Connor/Uniswap/uniswap-docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1613486826420}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL0Nvbm5vci9Vbmlzd2FwL3VuaXN3YXAtZG9jcy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyI7aW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JztleHBvcnQgY29uc3QgZnJvbnRNYXR0ZXI9e2lkOicwMy1wcm92aWRpbmctbGlxdWlkaXR5Jyx0aXRsZTonUHJvdmlkaW5nIExpcXVpZGl0eScsdGFnczonc21hcnQgY29udHJhY3QgaW50ZWdyYXRpb24sIGRldmVsb3Blci1ndWlkZXMsIGRvY3VtZW50YXRpb24nfTtleHBvcnQgY29uc3QgbWV0YWRhdGE9eyJ1bnZlcnNpb25lZElkIjoiZ3VpZGVzL3NtYXJ0LWNvbnRyYWN0LWludGVncmF0aW9uLzAzLXByb3ZpZGluZy1saXF1aWRpdHkiLCJpZCI6Imd1aWRlcy9zbWFydC1jb250cmFjdC1pbnRlZ3JhdGlvbi8wMy1wcm92aWRpbmctbGlxdWlkaXR5IiwiaXNEb2NzSG9tZVBhZ2UiOmZhbHNlLCJ0aXRsZSI6IlByb3ZpZGluZyBMaXF1aWRpdHkiLCJkZXNjcmlwdGlvbiI6IkludHJvZHVjdGlvbiIsInNvdXJjZSI6IkBzaXRlL2RvY3MvZ3VpZGVzL3NtYXJ0LWNvbnRyYWN0LWludGVncmF0aW9uLzAzLXByb3ZpZGluZy1saXF1aWRpdHkubWQiLCJzbHVnIjoiL2d1aWRlcy9zbWFydC1jb250cmFjdC1pbnRlZ3JhdGlvbi8wMy1wcm92aWRpbmctbGlxdWlkaXR5IiwicGVybWFsaW5rIjoiL2RvY3MvZ3VpZGVzL3NtYXJ0LWNvbnRyYWN0LWludGVncmF0aW9uLzAzLXByb3ZpZGluZy1saXF1aWRpdHkiLCJlZGl0VXJsIjoiaHR0cHM6Ly9naXRodWIuY29tL2RvY3MvZ3VpZGVzL3NtYXJ0LWNvbnRyYWN0LWludGVncmF0aW9uLzAzLXByb3ZpZGluZy1saXF1aWRpdHkubWQiLCJ2ZXJzaW9uIjoiY3VycmVudCIsInNpZGViYXIiOiJndWlkZXMiLCJwcmV2aW91cyI6eyJ0aXRsZSI6IkltcGxlbWVudCBhIFN3YXAiLCJwZXJtYWxpbmsiOiIvZG9jcy9ndWlkZXMvc21hcnQtY29udHJhY3QtaW50ZWdyYXRpb24vMDItdHJhZGluZy1mcm9tLWEtc21hcnQtY29udHJhY3QifSwibmV4dCI6eyJ0aXRsZSI6IkJ1aWxkaW5nIGFuIE9yYWNsZSIsInBlcm1hbGluayI6Ii9kb2NzL2d1aWRlcy9zbWFydC1jb250cmFjdC1pbnRlZ3JhdGlvbi8wNC1idWlsZGluZy1hbi1vcmFjbGUifX07LyogQGpzeFJ1bnRpbWUgY2xhc3NpYyAqLyAvKiBAanN4IG1keCAqL2V4cG9ydCBjb25zdCB0b2M9W107Y29uc3QgbWFrZVNob3J0Y29kZT1uYW1lPT5mdW5jdGlvbiBNRFhEZWZhdWx0U2hvcnRjb2RlKHByb3BzKXtjb25zb2xlLndhcm4oIkNvbXBvbmVudCAiK25hbWUrIiB3YXMgbm90IGltcG9ydGVkLCBleHBvcnRlZCwgb3IgcHJvdmlkZWQgYnkgTURYUHJvdmlkZXIgYXMgZ2xvYmFsIHNjb3BlIik7cmV0dXJuIG1keCgiZGl2Iixwcm9wcyk7fTtjb25zdCBMaW5rPW1ha2VTaG9ydGNvZGUoIkxpbmsiKTtjb25zdCBsYXlvdXRQcm9wcz17dG9jfTtjb25zdCBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoe2NvbXBvbmVudHMsLi4ucHJvcHN9KXtyZXR1cm4gbWR4KE1EWExheW91dCxfZXh0ZW5kcyh7fSxsYXlvdXRQcm9wcyxwcm9wcyx7Y29tcG9uZW50czpjb21wb25lbnRzLG1keFR5cGU6Ik1EWExheW91dCJ9KSxtZHgoImgxIix7ImlkIjoiaW50cm9kdWN0aW9uIn0sYEludHJvZHVjdGlvbmApLG1keCgicCIsbnVsbCxgV2hlbiBwcm92aWRpbmcgbGlxdWlkaXR5IGZyb20gYSBzbWFydCBjb250cmFjdCwgdGhlIG1vc3QgaW1wb3J0YW50IHRoaW5nIHRvIGtlZXAgaW4gbWluZCBpcyB0aGF0IHRva2VucyBkZXBvc2l0ZWQgaW50byBhIHBvb2wgYXQgYW55IHJhdGUgb3RoZXIgdGhhbiB0aGUgY3VycmVudCByZXNlcnZlIHJhdGlvIGAsbWR4KCJlbSIse3BhcmVudE5hbWU6InAifSxgYXJlIHZ1bG5lcmFibGUgdG8gYmVpbmcgYXJiaXRyYWdlZGApLGAuIEFzIGFuIGV4YW1wbGUsIGlmIHRoZSByYXRpbyBvZiB4OnkgaW4gYSBwYWlyIGlzIDEwOjIgKGkuZS4gdGhlIHByaWNlIGlzIDUpLCBhbmQgc29tZW9uZSBuYWl2ZWx5IGFkZHMgbGlxdWlkaXR5IGF0IDU6MiAoYSBwcmljZSBvZiAyLjUpLCB0aGUgY29udHJhY3Qgd2lsbCBzaW1wbHkgYWNjZXB0IGFsbCB0b2tlbnMgKGNoYW5naW5nIHRoZSBwcmljZSB0byAzLjc1IGFuZCBvcGVuaW5nIHVwIHRoZSBtYXJrZXQgdG8gYXJiaXRyYWdlKSwgYnV0IG9ubHkgaXNzdWUgcG9vbCB0b2tlbnMgZW50aXRsaW5nIHRoZSBzZW5kZXIgdG8gdGhlIGFtb3VudCBvZiBhc3NldHMgc2VudCBhdCB0aGUgcHJvcGVyIHJhdGlvLCBpbiB0aGlzIGNhc2UgNToxLiBUbyBhdm9pZCBkb25hdGluZyB0byBhcmJpdHJhZ2V1cnMsIGl0IGlzIGltcGVyYXRpdmUgdG8gYWRkIGxpcXVpZGl0eSBhdCB0aGUgY3VycmVudCBwcmljZS4gTHVja2lseSwgaXQncyBlYXN5IHRvIGVuc3VyZSB0aGF0IHRoaXMgY29uZGl0aW9uIGlzIG1ldCFgKSxtZHgoImgxIix7ImlkIjoidXNpbmctdGhlLXJvdXRlciJ9LGBVc2luZyB0aGUgUm91dGVyYCksbWR4KCJwIixudWxsLGBUaGUgZWFzaWVzdCB3YXkgdG8gc2FmZWx5IGFkZCBsaXF1aWRpdHkgdG8gYSBwb29sIGlzIHRvIHVzZSB0aGUgYCxtZHgoTGluayx7dG86Ii9kb2NzL3YyL3NtYXJ0LWNvbnRyYWN0cy9yb3V0ZXIwMiIsbWR4VHlwZToiTGluayJ9LGByb3V0ZXJgKSxgLCB3aGljaCBwcm92aWRlcyBzaW1wbGUgbWV0aG9kcyB0byBzYWZlbHkgYWRkIGxpcXVpZGl0eSB0byBhIHBvb2wuIElmIHRoZSBsaXF1aWRpdHkgaXMgdG8gYmUgYWRkZWQgdG8gYW4gRVJDLTIwL0VSQy0yMCBwYWlyLCB1c2UgYCxtZHgoTGluayx7dG86Ii9kb2NzL3YyL3NtYXJ0LWNvbnRyYWN0cy9yb3V0ZXIwMi8jYWRkbGlxdWlkaXR5IixtZHhUeXBlOiJMaW5rIn0sYGFkZExpcXVpZGl0eWApLGAuIElmIFdFVEggaXMgaW52b2x2ZWQsIHVzZSBgLG1keChMaW5rLHt0bzoiL2RvY3MvdjIvc21hcnQtY29udHJhY3RzL3JvdXRlcjAyLyNhZGRsaXF1aWRpdHlldGgiLG1keFR5cGU6IkxpbmsifSxgYWRkTGlxdWlkaXR5RVRIYCksYC5gKSxtZHgoInAiLG51bGwsYFRoZXNlIG1ldGhvZHMgYm90aCByZXF1aXJlIHRoZSBjYWxsZXIgdG8gY29tbWl0IHRvIGEgYCxtZHgoImVtIix7cGFyZW50TmFtZToicCJ9LGBiZWxpZWYgYWJvdXQgdGhlIGN1cnJlbnQgcHJpY2VgKSxgLCB3aGljaCBpcyBlbmNvZGVkIGluIHRoZSBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgYW1vdW50KkRlc2lyZWRgKSxgIHBhcmFtZXRlcnMuIFR5cGljYWxseSwgaXQncyBmYWlybHkgc2FmZSB0byBhc3N1bWUgdGhhdCB0aGUgY3VycmVudCBmYWlyIG1hcmtldCBwcmljZSBpcyBhcm91bmQgd2hhdCB0aGUgY3VycmVudCByZXNlcnZlIHJhdGlvIGlzIGZvciBhIHBhaXIgKGJlY2F1c2Ugb2YgYXJiaXRyYWdlKS4gU28sIGlmIGEgdXNlciB3YW50cyB0byBhZGQgMSBFVEggdG8gYSBwb29sLCBhbmQgdGhlIGN1cnJlbnQgREFJL1dFVEggcmF0aW8gb2YgdGhlIHBvb2wgaXMgMjAwLzEsIGl0J3MgcmVhc29uYWJsZSB0byBjYWxjdWxhdGUgdGhhdCAyMDAgREFJIG11c3QgYmUgc2VudCBhbG9uZyB3aXRoIHRoZSBFVEgsIHdoaWNoIGlzIGFuIGltcGxpY2l0IGNvbW1pdG1lbnQgdG8gdGhlIHByaWNlIG9mIDIwMCBEQUkvMSBXRVRILiBIb3dldmVyLCBpdCdzIGltcG9ydGFudCB0byBub3RlIHRoYXQgdGhpcyBtdXN0IGJlIGNhbGN1bGF0ZWQgYCxtZHgoImVtIix7cGFyZW50TmFtZToicCJ9LGBiZWZvcmUgdGhlIHRyYW5zYWN0aW9uIGlzIHN1Ym1pdHRlZGApLGAuIEl0IGlzIGAsbWR4KCJlbSIse3BhcmVudE5hbWU6InAifSxgbm90IHNhZmVgKSxgIHRvIGxvb2sgdXAgdGhlIHJlc2VydmUgcmF0aW8gZnJvbSB3aXRoaW4gYSB0cmFuc2FjdGlvbiBhbmQgcmVseSBvbiBpdCBhcyBhIHByaWNlIGJlbGllZiwgYXMgdGhpcyByYXRpbyBjYW4gYmUgY2hlYXBseSBtYW5pcHVsYXRlZCB0byB5b3VyIGRldHJpbWVudC5gKSxtZHgoInAiLG51bGwsYEhvd2V2ZXIsIGl0IGlzIHN0aWxsIHBvc3NpYmxlIHRvIHN1Ym1pdCBhIHRyYW5zYWN0aW9uIHdoaWNoIGVuY29kZXMgYSBiZWxpZWYgYWJvdXQgdGhlIHByaWNlIHdoaWNoIGVuZHMgdXAgYmVpbmcgd3JvbmcgYmVjYXVzZSBvZiBhIGxhcmdlciBjaGFuZ2UgaW4gdGhlIHRydWUgbWFya2V0IHByaWNlIGJlZm9yZSB0aGUgdHJhbnNhY3Rpb24gaXMgY29uZmlybWVkLiBGb3IgdGhhdCByZWFzb24sIGl0J3MgbmVjZXNzYXJ5IHRvIHBhc3MgYW4gYWRkaXRpb25hbCBzZXQgb2YgcGFyYW1ldGVycyB3aGljaCBlbmNvZGUgdGhlIGNhbGxlcidzIHRvbGVyYW5jZSB0byBwcmljZSBjaGFuZ2VzLiBUaGVzZSBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgYW1vdW50Kk1pbmApLGAgcGFyYW1ldGVycyBzaG91bGQgdHlwaWNhbGx5IGJlIHNldCB0byBwZXJjZW50YWdlcyBvZiB0aGUgY2FsY3VsYXRlZCBkZXNpcmVkIHByaWNlLiBTbywgYXQgYSAxJSB0b2xlcmFuY2UgbGV2ZWwsIGlmIG91ciB1c2VyIHNlbmRzIGEgdHJhbnNhY3Rpb24gd2l0aCAxIEVUSCBhbmQgMjAwIERBSSwgYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sYGFtb3VudEVUSE1pbmApLGAgc2hvdWxkIGJlIHNldCB0byBlLmcuIC45OSBFVEgsIGFuZCBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgYW1vdW50VG9rZW5NaW5gKSxgIHNob3VsZCBiZSBzZXQgdG8gMTk4IERBSS4gVGhpcyBtZWFucyB0aGF0LCBhdCB3b3JzdCwgbGlxdWlkaXR5IHdpbGwgYmUgYWRkZWQgYXQgYSByYXRlIGJldHdlZW4gMTk4IERBSS8xIEVUSCBhbmQgMjAyLjAyIERBSS8xIEVUSCAoMjAwIERBSS8uOTkgRVRIKS5gKSxtZHgoInAiLG51bGwsYE9uY2UgdGhlIHByaWNlIGNhbGN1bGF0aW9ucyBoYXZlIGJlZW4gbWFkZSwgaXQncyBpbXBvcnRhbnQgdG8gZW5zdXJlIHRoYXQgeW91ciBjb250cmFjdCBhKSBjb250cm9scyBhdCBsZWFzdCBhcyBtYW55IHRva2Vucy9FVEggYXMgd2VyZSBwYXNzZWQgYXMgYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sYGFtb3VudCpEZXNpcmVkYCksYCBwYXJhbWV0ZXJzLCBhbmQgYikgaGFzIGdyYW50ZWQgYXBwcm92YWwgdG8gdGhlIHJvdXRlciB0byB3aXRoZHJhdyB0aGlzIG1hbnkgdG9rZW5zLmApKTt9O01EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},{"version":3,"sources":["/Users/Connor/Uniswap/uniswap-docs/docs/guides/smart-contract-integration/03-providing-liquidity.md"],"names":["React","mdx","frontMatter","id","title","tags","metadata","toc","makeShortcode","name","MDXDefaultShortcode","props","console","warn","Link","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["\n  import React from 'react';\n  import { mdx } from '@mdx-js/react';\n\n  export const frontMatter = {\n\tid: '03-providing-liquidity',\n\ttitle: 'Providing Liquidity',\n\ttags: 'smart contract integration, developer-guides, documentation'\n};\nexport const metadata = {\n  \"unversionedId\": \"guides/smart-contract-integration/03-providing-liquidity\",\n  \"id\": \"guides/smart-contract-integration/03-providing-liquidity\",\n  \"isDocsHomePage\": false,\n  \"title\": \"Providing Liquidity\",\n  \"description\": \"Introduction\",\n  \"source\": \"@site/docs/guides/smart-contract-integration/03-providing-liquidity.md\",\n  \"slug\": \"/guides/smart-contract-integration/03-providing-liquidity\",\n  \"permalink\": \"/docs/guides/smart-contract-integration/03-providing-liquidity\",\n  \"editUrl\": \"https://github.com/docs/guides/smart-contract-integration/03-providing-liquidity.md\",\n  \"version\": \"current\",\n  \"sidebar\": \"guides\",\n  \"previous\": {\n    \"title\": \"Implement a Swap\",\n    \"permalink\": \"/docs/guides/smart-contract-integration/02-trading-from-a-smart-contract\"\n  },\n  \"next\": {\n    \"title\": \"Building an Oracle\",\n    \"permalink\": \"/docs/guides/smart-contract-integration/04-building-an-oracle\"\n  }\n};\n  /* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const toc = [];\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst Link = makeShortcode(\"Link\");\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h1>\n    <p>{`When providing liquidity from a smart contract, the most important thing to keep in mind is that tokens deposited into a pool at any rate other than the current reserve ratio `}<em parentName=\"p\">{`are vulnerable to being arbitraged`}</em>{`. As an example, if the ratio of x:y in a pair is 10:2 (i.e. the price is 5), and someone naively adds liquidity at 5:2 (a price of 2.5), the contract will simply accept all tokens (changing the price to 3.75 and opening up the market to arbitrage), but only issue pool tokens entitling the sender to the amount of assets sent at the proper ratio, in this case 5:1. To avoid donating to arbitrageurs, it is imperative to add liquidity at the current price. Luckily, it's easy to ensure that this condition is met!`}</p>\n    <h1 {...{\n      \"id\": \"using-the-router\"\n    }}>{`Using the Router`}</h1>\n    <p>{`The easiest way to safely add liquidity to a pool is to use the `}<Link to='/docs/v2/smart-contracts/router02' mdxType=\"Link\">{`router`}</Link>{`, which provides simple methods to safely add liquidity to a pool. If the liquidity is to be added to an ERC-20/ERC-20 pair, use `}<Link to='/docs/v2/smart-contracts/router02/#addliquidity' mdxType=\"Link\">{`addLiquidity`}</Link>{`. If WETH is involved, use `}<Link to='/docs/v2/smart-contracts/router02/#addliquidityeth' mdxType=\"Link\">{`addLiquidityETH`}</Link>{`.`}</p>\n    <p>{`These methods both require the caller to commit to a `}<em parentName=\"p\">{`belief about the current price`}</em>{`, which is encoded in the `}<inlineCode parentName=\"p\">{`amount*Desired`}</inlineCode>{` parameters. Typically, it's fairly safe to assume that the current fair market price is around what the current reserve ratio is for a pair (because of arbitrage). So, if a user wants to add 1 ETH to a pool, and the current DAI/WETH ratio of the pool is 200/1, it's reasonable to calculate that 200 DAI must be sent along with the ETH, which is an implicit commitment to the price of 200 DAI/1 WETH. However, it's important to note that this must be calculated `}<em parentName=\"p\">{`before the transaction is submitted`}</em>{`. It is `}<em parentName=\"p\">{`not safe`}</em>{` to look up the reserve ratio from within a transaction and rely on it as a price belief, as this ratio can be cheaply manipulated to your detriment.`}</p>\n    <p>{`However, it is still possible to submit a transaction which encodes a belief about the price which ends up being wrong because of a larger change in the true market price before the transaction is confirmed. For that reason, it's necessary to pass an additional set of parameters which encode the caller's tolerance to price changes. These `}<inlineCode parentName=\"p\">{`amount*Min`}</inlineCode>{` parameters should typically be set to percentages of the calculated desired price. So, at a 1% tolerance level, if our user sends a transaction with 1 ETH and 200 DAI, `}<inlineCode parentName=\"p\">{`amountETHMin`}</inlineCode>{` should be set to e.g. .99 ETH, and `}<inlineCode parentName=\"p\">{`amountTokenMin`}</inlineCode>{` should be set to 198 DAI. This means that, at worst, liquidity will be added at a rate between 198 DAI/1 ETH and 202.02 DAI/1 ETH (200 DAI/.99 ETH).`}</p>\n    <p>{`Once the price calculations have been made, it's important to ensure that your contract a) controls at least as many tokens/ETH as were passed as `}<inlineCode parentName=\"p\">{`amount*Desired`}</inlineCode>{` parameters, and b) has granted approval to the router to withdraw this many tokens.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "]}]}