{"version":3,"file":"index.production.js","sources":["../../src/highlight/getAttributeValueByPath.ts","../../src/constants/index.ts","../../src/highlight/parseAttribute.ts","../../src/highlight/parseAlgoliaHitHighlight.ts","../../src/highlight/isPartHighlighted.ts","../../src/highlight/reverseHighlightedParts.ts","../../src/highlight/parseAlgoliaHitSnippet.ts","../../src/version.ts","../../src/search/search.ts","../../src/search/getAlgoliaHits.ts","../../src/search/getAlgoliaResults.ts","../../src/highlight/parseAlgoliaHitReverseHighlight.ts","../../src/highlight/parseAlgoliaHitReverseSnippet.ts"],"sourcesContent":["export function getAttributeValueByPath<THit>(hit: THit, path: string[]): any {\n  return path.reduce((current, key) => current && current[key], hit);\n}\n","export const HIGHLIGHT_PRE_TAG = '__aa-highlight__';\nexport const HIGHLIGHT_POST_TAG = '__/aa-highlight__';\n","import { HIGHLIGHT_PRE_TAG, HIGHLIGHT_POST_TAG } from '../constants';\n\nimport { ParsedAttribute } from './ParsedAttribute';\n\n/**\n * Creates a data structure that allows to concatenate similar highlighting\n * parts in a single value.\n */\nfunction createAttributeSet(initialValue: ParsedAttribute[] = []) {\n  const value = initialValue;\n\n  return {\n    get() {\n      return value;\n    },\n    add(part: ParsedAttribute) {\n      const lastPart: ParsedAttribute | undefined = value[value.length - 1];\n\n      if (lastPart?.isHighlighted === part.isHighlighted) {\n        value[value.length - 1] = {\n          value: lastPart.value + part.value,\n          isHighlighted: lastPart.isHighlighted,\n        };\n      } else {\n        value.push(part);\n      }\n    },\n  };\n}\n\ntype ParseAttributeParams = {\n  highlightedValue: string;\n};\n\nexport function parseAttribute({\n  highlightedValue,\n}: ParseAttributeParams): ParsedAttribute[] {\n  const preTagParts = highlightedValue.split(HIGHLIGHT_PRE_TAG);\n  const firstValue = preTagParts.shift();\n  const parts = createAttributeSet(\n    firstValue ? [{ value: firstValue, isHighlighted: false }] : []\n  );\n\n  preTagParts.forEach((part) => {\n    const postTagParts = part.split(HIGHLIGHT_POST_TAG);\n\n    parts.add({\n      value: postTagParts[0],\n      isHighlighted: true,\n    });\n\n    if (postTagParts[1] !== '') {\n      parts.add({\n        value: postTagParts[1],\n        isHighlighted: false,\n      });\n    }\n  });\n\n  return parts.get();\n}\n","import { warn } from '@algolia/autocomplete-shared';\nimport { Hit } from '@algolia/client-search';\n\nimport { getAttributeValueByPath } from './getAttributeValueByPath';\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { parseAttribute } from './parseAttribute';\nimport { ParsedAttribute } from './ParsedAttribute';\n\nexport function parseAlgoliaHitHighlight<THit extends Hit<{}>>({\n  hit,\n  attribute,\n}: ParseAlgoliaHitParams<THit>): ParsedAttribute[] {\n  const path = Array.isArray(attribute) ? attribute : ([attribute] as string[]);\n  let highlightedValue = getAttributeValueByPath(hit, [\n    '_highlightResult',\n    ...path,\n    'value',\n  ]);\n\n  if (typeof highlightedValue !== 'string') {\n    warn(\n      false,\n      `The attribute \"${path.join('.')}\" described by the path ${JSON.stringify(\n        path\n      )} does not exist on the hit. Did you set it in \\`attributesToHighlight\\`?` +\n        '\\nSee https://www.algolia.com/doc/api-reference/api-parameters/attributesToHighlight/'\n    );\n\n    highlightedValue = getAttributeValueByPath(hit, path) || '';\n  }\n\n  return parseAttribute({ highlightedValue });\n}\n","import { ParsedAttribute } from './ParsedAttribute';\n\nconst htmlEscapes = {\n  '&amp;': '&',\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&#39;': \"'\",\n};\nconst hasAlphanumeric = new RegExp(/\\w/i);\nconst regexEscapedHtml = /&(amp|quot|lt|gt|#39);/g;\nconst regexHasEscapedHtml = RegExp(regexEscapedHtml.source);\n\nfunction unescape(value: string): string {\n  return value && regexHasEscapedHtml.test(value)\n    ? value.replace(regexEscapedHtml, (character) => htmlEscapes[character])\n    : value;\n}\n\nexport function isPartHighlighted(parts: ParsedAttribute[], i: number) {\n  const current = parts[i];\n  const isNextHighlighted = parts[i + 1]?.isHighlighted || true;\n  const isPreviousHighlighted = parts[i - 1]?.isHighlighted || true;\n\n  if (\n    !hasAlphanumeric.test(unescape(current.value)) &&\n    isPreviousHighlighted === isNextHighlighted\n  ) {\n    return isPreviousHighlighted;\n  }\n\n  return current.isHighlighted;\n}\n","import { isPartHighlighted } from './isPartHighlighted';\nimport { ParsedAttribute } from './ParsedAttribute';\n\nexport function reverseHighlightedParts(parts: ParsedAttribute[]) {\n  // We don't want to highlight the whole word when no parts match.\n  if (!parts.some((part) => part.isHighlighted)) {\n    return parts.map((part) => ({ ...part, isHighlighted: false }));\n  }\n\n  return parts.map((part, i) => ({\n    ...part,\n    isHighlighted: !isPartHighlighted(parts, i),\n  }));\n}\n","import { warn } from '@algolia/autocomplete-shared';\nimport { Hit } from '@algolia/client-search';\n\nimport { getAttributeValueByPath } from './getAttributeValueByPath';\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { parseAttribute } from './parseAttribute';\nimport { ParsedAttribute } from './ParsedAttribute';\n\nexport function parseAlgoliaHitSnippet<THit extends Hit<{}>>({\n  hit,\n  attribute,\n}: ParseAlgoliaHitParams<THit>): ParsedAttribute[] {\n  const path = Array.isArray(attribute) ? attribute : ([attribute] as string[]);\n  let highlightedValue = getAttributeValueByPath(hit, [\n    '_snippetResult',\n    ...path,\n    'value',\n  ]);\n\n  if (typeof highlightedValue !== 'string') {\n    warn(\n      false,\n      `The attribute \"${path.join('.')}\" described by the path ${JSON.stringify(\n        path\n      )} does not exist on the hit. Did you set it in \\`attributesToSnippet\\`?` +\n        '\\nSee https://www.algolia.com/doc/api-reference/api-parameters/attributesToSnippet/'\n    );\n\n    highlightedValue = getAttributeValueByPath(hit, path) || '';\n  }\n\n  return parseAttribute({ highlightedValue });\n}\n","export const version = '1.0.0-alpha.42';\n","import { MultipleQueriesQuery } from '@algolia/client-search';\nimport { SearchClient } from 'algoliasearch/lite';\n\nimport { HIGHLIGHT_PRE_TAG, HIGHLIGHT_POST_TAG } from '../constants';\nimport { version } from '../version';\n\ntype UserAgent = { segment: string; version?: string };\nexport interface SearchParams {\n  searchClient: SearchClient;\n  queries: MultipleQueriesQuery[];\n  userAgents?: UserAgent[];\n}\n\nexport function search<TRecord>({\n  searchClient,\n  queries,\n  userAgents = [],\n}: SearchParams) {\n  if (typeof searchClient.addAlgoliaAgent === 'function') {\n    const algoliaAgents: UserAgent[] = [\n      { segment: 'autocomplete-core', version },\n      ...userAgents,\n    ];\n\n    algoliaAgents.forEach(({ segment, version }) => {\n      searchClient.addAlgoliaAgent(segment, version);\n    });\n  }\n\n  return searchClient.search<TRecord>(\n    queries.map((searchParameters) => {\n      const { indexName, query, params } = searchParameters;\n\n      return {\n        indexName,\n        query,\n        params: {\n          hitsPerPage: 5,\n          highlightPreTag: HIGHLIGHT_PRE_TAG,\n          highlightPostTag: HIGHLIGHT_POST_TAG,\n          ...params,\n        },\n      };\n    })\n  );\n}\n","import { Hit } from '@algolia/client-search';\n\nimport { search, SearchParams } from './search';\n\nexport function getAlgoliaHits<TRecord>({\n  searchClient,\n  queries,\n  userAgents,\n}: SearchParams): Promise<Array<Array<Hit<TRecord>>>> {\n  return search<TRecord>({ searchClient, queries, userAgents }).then(\n    (response) => {\n      const results = response.results;\n\n      return results.map((result) =>\n        result.hits.map((hit) => {\n          return {\n            ...hit,\n            __autocomplete_indexName: result.index,\n            __autocomplete_queryID: result.queryID,\n          };\n        })\n      );\n    }\n  );\n}\n","import { SearchResponse } from '@algolia/client-search';\n\nimport { search, SearchParams } from './search';\n\nexport function getAlgoliaResults<TRecord>({\n  searchClient,\n  queries,\n  userAgents,\n}: SearchParams): Promise<Array<SearchResponse<TRecord>>> {\n  return search<TRecord>({ searchClient, queries, userAgents }).then(\n    (response) => {\n      return response.results;\n    }\n  );\n}\n","import { Hit } from '@algolia/client-search';\n\nimport { parseAlgoliaHitHighlight } from './parseAlgoliaHitHighlight';\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { ParsedAttribute } from './ParsedAttribute';\nimport { reverseHighlightedParts } from './reverseHighlightedParts';\n\nexport function parseAlgoliaHitReverseHighlight<THit extends Hit<{}>>(\n  props: ParseAlgoliaHitParams<THit>\n): ParsedAttribute[] {\n  return reverseHighlightedParts(parseAlgoliaHitHighlight<THit>(props));\n}\n","import { Hit } from '@algolia/client-search';\n\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { parseAlgoliaHitSnippet } from './parseAlgoliaHitSnippet';\nimport { ParsedAttribute } from './ParsedAttribute';\nimport { reverseHighlightedParts } from './reverseHighlightedParts';\n\nexport function parseAlgoliaHitReverseSnippet<THit extends Hit<{}>>(\n  props: ParseAlgoliaHitParams<THit>\n): ParsedAttribute[] {\n  return reverseHighlightedParts(parseAlgoliaHitSnippet<THit>(props));\n}\n"],"names":["getAttributeValueByPath","hit","path","reduce","current","key","HIGHLIGHT_PRE_TAG","HIGHLIGHT_POST_TAG","parseAttribute","preTagParts","highlightedValue","split","firstValue","shift","parts","value","get","add","part","lastPart","length","isHighlighted","push","createAttributeSet","forEach","postTagParts","parseAlgoliaHitHighlight","attribute","Array","isArray","htmlEscapes","hasAlphanumeric","RegExp","regexEscapedHtml","regexHasEscapedHtml","source","isPartHighlighted","i","isNextHighlighted","isPreviousHighlighted","test","replace","character","reverseHighlightedParts","some","map","parseAlgoliaHitSnippet","version","search","searchClient","queries","userAgents","addAlgoliaAgent","segment","searchParameters","indexName","query","params","hitsPerPage","highlightPreTag","highlightPostTag","then","response","results","result","hits","__autocomplete_indexName","index","__autocomplete_queryID","queryID","props"],"mappings":"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"}